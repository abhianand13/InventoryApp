//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InventoryApp.ServiceRepository.InventoryAppServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductInventoryDTO", Namespace="http://schemas.datacontract.org/2004/07/InventoryApp.Service.DTO")]
    [System.SerializableAttribute()]
    public partial class ProductInventoryDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private InventoryApp.ServiceRepository.InventoryAppServiceReference.ProductDTO ProductField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InventoryApp.ServiceRepository.InventoryAppServiceReference.ProductDTO Product {
            get {
                return this.ProductField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductField, value) != true)) {
                    this.ProductField = value;
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductDTO", Namespace="http://schemas.datacontract.org/2004/07/InventoryApp.Service.DTO")]
    [System.SerializableAttribute()]
    public partial class ProductDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderDTO", Namespace="http://schemas.datacontract.org/2004/07/InventoryApp.Service.DTO")]
    [System.SerializableAttribute()]
    public partial class OrderDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<InventoryApp.ServiceRepository.InventoryAppServiceReference.ProductInventoryDTO> ProductsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<InventoryApp.ServiceRepository.InventoryAppServiceReference.ProductInventoryDTO> Products {
            get {
                return this.ProductsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductsField, value) != true)) {
                    this.ProductsField = value;
                    this.RaisePropertyChanged("Products");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="InventoryAppServiceReference.IInventoryService", CallbackContract=typeof(InventoryApp.ServiceRepository.InventoryAppServiceReference.IInventoryServiceCallback))]
    public interface IInventoryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInventoryService/LoadProductInventory", ReplyAction="http://tempuri.org/IInventoryService/LoadProductInventoryResponse")]
        System.Collections.Generic.List<InventoryApp.ServiceRepository.InventoryAppServiceReference.ProductInventoryDTO> LoadProductInventory();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInventoryService/LoadProductInventory", ReplyAction="http://tempuri.org/IInventoryService/LoadProductInventoryResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<InventoryApp.ServiceRepository.InventoryAppServiceReference.ProductInventoryDTO>> LoadProductInventoryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInventoryService/LoadOrders", ReplyAction="http://tempuri.org/IInventoryService/LoadOrdersResponse")]
        System.Collections.Generic.List<InventoryApp.ServiceRepository.InventoryAppServiceReference.OrderDTO> LoadOrders(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInventoryService/LoadOrders", ReplyAction="http://tempuri.org/IInventoryService/LoadOrdersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<InventoryApp.ServiceRepository.InventoryAppServiceReference.OrderDTO>> LoadOrdersAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInventoryService/CreateNewOrder", ReplyAction="http://tempuri.org/IInventoryService/CreateNewOrderResponse")]
        InventoryApp.ServiceRepository.InventoryAppServiceReference.OrderDTO CreateNewOrder(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInventoryService/CreateNewOrder", ReplyAction="http://tempuri.org/IInventoryService/CreateNewOrderResponse")]
        System.Threading.Tasks.Task<InventoryApp.ServiceRepository.InventoryAppServiceReference.OrderDTO> CreateNewOrderAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IInventoryService/AddToOrder")]
        void AddToOrder(System.Guid userId, int productId, int orderId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IInventoryService/AddToOrder")]
        System.Threading.Tasks.Task AddToOrderAsync(System.Guid userId, int productId, int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInventoryService/GetOrderProducts", ReplyAction="http://tempuri.org/IInventoryService/GetOrderProductsResponse")]
        System.Collections.Generic.List<InventoryApp.ServiceRepository.InventoryAppServiceReference.ProductInventoryDTO> GetOrderProducts(System.Guid userId, int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInventoryService/GetOrderProducts", ReplyAction="http://tempuri.org/IInventoryService/GetOrderProductsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<InventoryApp.ServiceRepository.InventoryAppServiceReference.ProductInventoryDTO>> GetOrderProductsAsync(System.Guid userId, int orderId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInventoryServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IInventoryService/HandleProductInventoryUpdated")]
        void HandleProductInventoryUpdated(int productId, int quantity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInventoryServiceChannel : InventoryApp.ServiceRepository.InventoryAppServiceReference.IInventoryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InventoryServiceClient : System.ServiceModel.DuplexClientBase<InventoryApp.ServiceRepository.InventoryAppServiceReference.IInventoryService>, InventoryApp.ServiceRepository.InventoryAppServiceReference.IInventoryService {
        
        public InventoryServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public InventoryServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public InventoryServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public InventoryServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public InventoryServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<InventoryApp.ServiceRepository.InventoryAppServiceReference.ProductInventoryDTO> LoadProductInventory() {
            return base.Channel.LoadProductInventory();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<InventoryApp.ServiceRepository.InventoryAppServiceReference.ProductInventoryDTO>> LoadProductInventoryAsync() {
            return base.Channel.LoadProductInventoryAsync();
        }
        
        public System.Collections.Generic.List<InventoryApp.ServiceRepository.InventoryAppServiceReference.OrderDTO> LoadOrders(System.Guid userId) {
            return base.Channel.LoadOrders(userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<InventoryApp.ServiceRepository.InventoryAppServiceReference.OrderDTO>> LoadOrdersAsync(System.Guid userId) {
            return base.Channel.LoadOrdersAsync(userId);
        }
        
        public InventoryApp.ServiceRepository.InventoryAppServiceReference.OrderDTO CreateNewOrder(System.Guid userId) {
            return base.Channel.CreateNewOrder(userId);
        }
        
        public System.Threading.Tasks.Task<InventoryApp.ServiceRepository.InventoryAppServiceReference.OrderDTO> CreateNewOrderAsync(System.Guid userId) {
            return base.Channel.CreateNewOrderAsync(userId);
        }
        
        public void AddToOrder(System.Guid userId, int productId, int orderId) {
            base.Channel.AddToOrder(userId, productId, orderId);
        }
        
        public System.Threading.Tasks.Task AddToOrderAsync(System.Guid userId, int productId, int orderId) {
            return base.Channel.AddToOrderAsync(userId, productId, orderId);
        }
        
        public System.Collections.Generic.List<InventoryApp.ServiceRepository.InventoryAppServiceReference.ProductInventoryDTO> GetOrderProducts(System.Guid userId, int orderId) {
            return base.Channel.GetOrderProducts(userId, orderId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<InventoryApp.ServiceRepository.InventoryAppServiceReference.ProductInventoryDTO>> GetOrderProductsAsync(System.Guid userId, int orderId) {
            return base.Channel.GetOrderProductsAsync(userId, orderId);
        }
    }
}
